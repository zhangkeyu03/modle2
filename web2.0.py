import requests
import datetime
from collections import defaultdict
import matplotlib.pyplot as plt

# –í–∞—à VK —Ç–æ–∫–µ–Ω (–ø–æ–ª—É—á–∏—Ç–µ –Ω–∞ https://dev.vk.com/)
TOKEN = '–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å'
VK_API_VERSION = '5.199'

# –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫
QUERY = '–°–ü–±–ì–£'
MAX_COUNT = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
BATCH_SIZE = 100  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å (–º–∞–∫—Å. 100)
BASE_URL = 'https://api.vk.com/method/newsfeed.search'

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
stats_by_day = defaultdict(int)
user_ids = set()
likes = comments = reposts = views = 0

# –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
for offset in range(0, MAX_COUNT, BATCH_SIZE):
    params = {
        'q': QUERY,
        'count': BATCH_SIZE,
        'access_token': TOKEN,
        'v': VK_API_VERSION,
        'offset': offset,
    }

    try:
        r = requests.get(BASE_URL, params=params)
        data = r.json().get('response', {}).get('items', [])
        if not data:
            break

        for item in data:
            # –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            date = datetime.datetime.fromtimestamp(item['date']).date()
            stats_by_day[date] += 1

            # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_ids.add(item.get('from_id'))

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
            likes += item.get('likes', {}).get('count', 0)
            comments += item.get('comments', {}).get('count', 0)
            reposts += item.get('reposts', {}).get('count', 0)
            views += item.get('views', {}).get('count', 0)

    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        break

# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
print(f"\nüìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {sum(stats_by_day.values())}")
print(f"üìå –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(user_ids)}")
print(f"üëç –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {likes}")
print(f"üí¨ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comments}")
print(f"üîÅ –í—Å–µ–≥–æ —Ä–µ–ø–æ—Å—Ç–æ–≤: {reposts}")
print(f"üëÅÔ∏è –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {views}")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
dates = sorted(stats_by_day.keys())
values = [stats_by_day[date] for date in dates]

plt.figure(figsize=(10, 5))
plt.plot(dates, values, marker='o')
plt.title("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –æ –°–ü–±–ì–£ –ø–æ –¥–Ω—è–º")
plt.xlabel("–î–∞—Ç–∞")
plt.ylabel("–ü—É–±–ª–∏–∫–∞—Ü–∏–∏")
plt.xticks(rotation=45)
plt.tight_layout()
plt.grid(True)
plt.show()
